<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jmol]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.jmolboy.com/"/>
  <updated>2015-11-19T06:43:56.000Z</updated>
  <id>http://www.jmolboy.com/</id>
  
  <author>
    <name><![CDATA[Jmol]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[只是不想现在一眼望见几十年后的自己]]></title>
    <link href="http://www.jmolboy.com/2015/11/19/th15-11-19/"/>
    <id>http://www.jmolboy.com/2015/11/19/th15-11-19/</id>
    <published>2015-11-19T05:06:47.000Z</published>
    <updated>2015-11-19T06:43:56.000Z</updated>
    <content type="html"><![CDATA[<p>20多岁，异乡，独自漂泊；不奢谈梦想；<br><br>拼搏，只是不想现在一眼望见几十年后的自己…<a id="more"></a></p>
<p><img src="http://7xnu0w.com1.z0.glb.clouddn.com/stayinbigcity.jpg" alt="Node"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>20多岁，异乡，独自漂泊；不奢谈梦想；<br/><br>拼搏，只是不想现在一眼望见几十年后的自己…]]>
    
    </summary>
    
      <category term="所思所想" scheme="http://www.jmolboy.com/tags/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
      <category term="所思所想" scheme="http://www.jmolboy.com/categories/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[模块化你的javascript]]></title>
    <link href="http://www.jmolboy.com/2015/10/27/moduleyourjavascript/"/>
    <id>http://www.jmolboy.com/2015/10/27/moduleyourjavascript/</id>
    <published>2015-10-27T13:39:47.000Z</published>
    <updated>2015-11-06T09:03:37.000Z</updated>
    <content type="html"><![CDATA[<p>随着互联网的飞速发展，用户和企业对web前端的展示和交互要求也越来越高；而在web铁三角(html+css+js)中扮演很重要角色的javascript也在不断的前进；从最初web1.0被用于做前端表单校验和网页动画；<a id="more"></a>到web2.0时代利用ajax做异步更新及html5标准api的制定，javascript开始被广泛的关注和应用；在web2.0流行的时代，各种前端库和框架被开发出来，javascript也从最初的兼容各版本浏览器、表单校验上升到应用开发的级别上；<br><img src="http://7xnu0w.com1.z0.glb.clouddn.com/web_js_html_css.jpg" alt=""></p>
<p>经历了不断的应用和探索，javascript不断被抽象和封装以支持越来越复杂的业务逻辑，从单一的前端交互上升到业务处理；后来nodejs的出现又让javascript可以应用于服务端开发、网络编程，从客户端编程语言跃升到服务端语言；</p>
<p>伴随着的是javascirpt代码量越来越多了，业务越来越复杂了，各种依赖层次越来越深了，版本越来越不好控制了；那怎么解决呢？答案就是 <strong>模块化</strong> (什么是<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">模块系统和模块化</a>可参考<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a>)</p>
<h2 id="传统的模块化方式">传统的模块化方式</h2><p>传统的处理方式大多包括以下几类：</p>
<ul>
<li>文件拆分</li>
<li>全局变量</li>
<li>命名空间</li>
<li>YUI3类似的模块化方式</li>
</ul>
<p>但是这些方式都能一时的解决问题，但也会带来新的问题；具体详见<a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">前端模块化开发的价值</a>(by玉伯)</p>
<h2 id="CommonJs">CommonJs</h2><p>2009年Node的横空出世，人们可以用javascript编写服务端代码了；于是大牛云集的<a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="external">CommonJS</a>(过去叫ServerJS)发力了，推出了<a href="http://wiki.commonjs.org/wiki/Modules" target="_blank" rel="external">Modules/1.0</a>规范。接下来，在Nodejs中得到了不错的实践；CommonJS定义的规范十分简单，主要分为模块引用、模块定义和模块标识3个部分</p>
<h4 id="模块引用">模块引用</h4><p>在CommonJS中使用require()方法，这个方法接受模块标识，以此引入一个模块的到当前上下文中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math=<span class="built_in">require</span>(<span class="string">'math'</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="模块定义">模块定义</h4><p>在模块中，上下文提供require()方法来引入外部模块；对应引入的功能，上下文提供exports对象用于导出当前模块的属性或方法，并且是唯一的出口。在模块中还有一个module对象，它代表模块自身，儿exports是module的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//math.js</span></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>, i = <span class="number">0</span>, args = <span class="built_in">arguments</span>, l = args.length;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; l) &#123;</span><br><span class="line">    sum += args[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>在另一个文件中我们可以使用require()方法引入它，接着就能访问它了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//program.js</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</span><br><span class="line">math.increment = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> add(val, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="模块标识">模块标识</h4><p>模块标识其实就是require()方法的参数，上文的<code>var math = require(&#39;math&#39;)</code>中的math就是模块标识，它是一个小驼峰的字符串，可以没有文件后缀名的.js</p>
<p>模块的定义和接口都很简洁，它的存在是将类聚的方法和变量限定在私有的作用域中，且提供引入和导出功能以方便的连接上下文依赖；每个模块有独立的空间，互不干扰。</p>
<p><img src="http://7xnu0w.com1.z0.glb.clouddn.com/commonjs_modules.png" alt=""></p>
<p>javascript在Node出现以后，相比别的编程语言多了一项优势，那就是一些模块可以在前后端公用，因为这些Api在各个宿主环境下都有提供，单在实际中还是有差别的。</p>
<ul>
<li>多终端而言：浏览器端的javascript需要经历从服务端下载到多个客户端执行；服务端javascript则是相同的代码需要多次执行；</li>
<li>浏览器端javascript依赖于带宽；服务端javascript依赖于CPU和内存等资源；</li>
<li>浏览器端需要从网络端加载代码；服务端则是从磁盘中加载；两者加载速度不在一个数量级上</li>
</ul>
<p>整个在服务端的引入过程，几乎都是同步的，但是如果前端模块也用同步的方式来引入，用户体验将会大打折扣，UI在初始化过程中需要花费很多时间来等待脚本的加载。</p>
<p>鉴于网络的原因，CommonJS为服务端javascript制定的规范并不完全适用于前端场景。经过激烈的争论后，AMD(Asynchronous Module Definition)异步模块定义在前端场景中胜出(可参考<a href="https://github.com/seajs/seajs/issues/588" target="_blank" rel="external">前端模块化开发那点历史</a>)，另外还有玉伯定义的CMD规范。</p>
<h2 id="AMD规范">AMD规范</h2><p>AMD(Asynchronous Module Definition)规范的代表是requirejs，在前端异步加载所需要的模块，在回调函数中执行主逻辑，这点其实广大前端开发着并不陌生；AMD规范的内容包含：</p>
<ul>
<li><p>使用全局define方法来定义模块</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id,dependencies,factory);</span><br></pre></td></tr></table></figure>
</li>
<li><p>id是模块标识；dependencies是依赖的模块数组；模块id参数和依赖参数是可选的，factory的内容就是实际代码了。比如：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> exports=&#123;&#125;;</span><br><span class="line">	exports.hello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alter(<span class="string">'hello'</span>);			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> exports;		</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>factory参数如果是函数，对外公开api的方法有：A.return数据；B.exports导出；C.module.exports导出；</p>
</li>
<li><p>如果factory为对象，则该对象即为模块的返回值。例如:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//alert.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'excute alert.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    alert: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello, alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//confirm.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'excute confirm.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">     confirm: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'hello, pls confirm'</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'alert'</span>, <span class="string">'confirm'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">alert, confirm</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'excute main.js'</span>);</span><br><span class="line">   alert.alert();</span><br><span class="line">   $(<span class="string">'#confirm'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      confirm.hello();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>运行上面main.js后，会先后输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">excute alert.js</span><br><span class="line"></span><br><span class="line">excute confirm.js</span><br><span class="line"></span><br><span class="line">excute main.js</span><br><span class="line"></span><br><span class="line">hello,alert</span><br></pre></td></tr></table></figure>
<p>点击confirm按钮后会输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,pls confirm</span><br></pre></td></tr></table></figure>
<p>你是否会高兴的说：终于模块化啦；可是你应该发现，在我们还没有点击confirm按钮时，confirm.js已经被执行过了；因为web本身的特点，预先下载被依赖的模块自然没什么问题，可是是否需要预先执行呢？那么当一个模块依赖了好多个别的模块，在执行自身模块之前需要将依赖的模块都预执行而不管他们是否会立刻用到，在很多情境下，就会导致页面响应迟钝，浏览器内存狂升；</p>
<p>当然后来requirejs也做了兼容Modules/Wrappings的写法，AMD将此兼容称为Simplified CommonJS wrapping，即并不是完整的实现Modules/Wrappings。<br>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dialog.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'excute dialog.js'</span>);</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      alert: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> alt = <span class="built_in">require</span>(<span class="string">'alert'</span>);</span><br><span class="line">           alt.alert();</span><br><span class="line">      &#125;,</span><br><span class="line">      run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         $(<span class="string">'#confirm'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cfm = <span class="built_in">require</span>(<span class="string">'confirm'</span>);</span><br><span class="line">            cfm.confirm();</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然看起来感觉好多了，使用的时候主动require添加引用，而其实它只是支持了这样的语法，依旧没有真正的实现模块的延后执行。比如上面的代码，正常理解是会首先预下载alert.js和confirm.js，然后在执行dialog.js的alert方法时执行alert.js代码，在点击confirm按钮后才开始执行confirm.js里的代码。实际却不是这样，只要模块被引用进来，alert.js和confirm.js都被预先执行了。如果我们在引用一下dialog.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'dialog'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">dialog</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>就会输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">excute alert.js</span><br><span class="line"></span><br><span class="line">excute confirm.js</span><br><span class="line"></span><br><span class="line">excute dialog.js</span><br></pre></td></tr></table></figure>
<h2 id="CMD规范">CMD规范</h2><p>CMD(Common Module Definition)规范由国内的玉伯提出，代表是玉伯的<a href="https://github.com/seajs/seajs" target="_blank" rel="external">seajs</a>，与AMD规范的主要区别在于定义模块和依赖引入；具体<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD模块定义规范</a>详见<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a>，使用CMD的seajs，上面代码就可以这样编写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//alert.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'excute alert.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    alert: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello, alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//confirm.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'excute confirm.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">     confirm: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'hello, pls confirm'</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'excute main.js'</span>);</span><br><span class="line">   <span class="keyword">var</span> alt=<span class="built_in">require</span>(<span class="string">'alert'</span>);</span><br><span class="line">   alt.alert();</span><br><span class="line">   $(<span class="string">'#confirm'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> cfm=<span class="built_in">require</span>(<span class="string">'confirm'</span>);</span><br><span class="line">		cfm.hello();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面代码执行就会输出：    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">excute main.js</span><br><span class="line"></span><br><span class="line">excute alert.js</span><br><span class="line"></span><br><span class="line">hello, alert</span><br></pre></td></tr></table></figure>
<p>此过程中alert.js和confirm.js都会先下载，但是confirm.js并不会先执行；而是等到点击按钮以后才执行。比如点击按钮以后会输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">excute confirm.js</span><br><span class="line"></span><br><span class="line">hello,pls confirm</span><br></pre></td></tr></table></figure>
<p>这样才既在语法上又在实现上实现了预先下载、延迟引用、延迟执行的目的；</p>
<p>当然seajs也支持在模块内部异步加载模块，并提供了异步加载结束后的回调</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.async(id, callback?)</span><br></pre></td></tr></table></figure>
<p>例如上面的mainjs就可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'excute main.js'</span>);</span><br><span class="line">   <span class="built_in">require</span>.async(<span class="string">'alert'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">alt</span>)</span>&#123;</span><br><span class="line">		alt.alert();</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   $(<span class="string">'#confirm'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">require</span>.async(<span class="string">'confirm'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cfm</span>)</span>&#123;</span><br><span class="line">			cfm.hello();</span><br><span class="line">		&#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>seajs和requirejs的异同，按作者的定义主要体现在这几点：(参考自<a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="external">与 RequireJS 的异同</a>)</p>
<ul>
<li><strong>定位有差异</strong>。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以很方便跑在 Node 环境中。</li>
<li><strong>遵循的规范不同</strong>。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1 和 Node Modules 规范。</li>
<li><strong>推广理念有差异</strong>。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。</li>
<li><strong>对开发调试的支持有差异</strong>。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持</li>
<li><strong>插件机制不同</strong>。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富</li>
</ul>
<p>总结下就是，如果说 RequireJS 是 Prototype 类库的话，则 Sea.js 致力于成为 jQuery 类库。</p>
<p>更多seajs信息，请移步<a href="http://seajs.org/" target="_blank" rel="external">http://seajs.org/</a></p>
<h2 id="兼容多种规范">兼容多种规范</h2><p>那么有咩有办法让开发出的模块能同时兼容前后端呢，当然有…但是为了能够前后端保持一致，最好的做法就是将我们的代码放入一个独立的闭包里。以便能同时兼容Nodejs、AMD、CMD以及普通的浏览器环境。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name,definition</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//检测是否为AMD或CMD</span></span><br><span class="line">    <span class="keyword">var</span> hasDefine=<span class="keyword">typeof</span> define === <span class="string">'function'</span>,</span><br><span class="line">    <span class="comment">//是否为Node</span></span><br><span class="line">    hasExports=<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hasDefine)&#123;</span><br><span class="line">        <span class="comment">//AMD或CMD</span></span><br><span class="line">        define(definition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(hasExports)&#123;</span><br><span class="line">        <span class="comment">//普通Node模块</span></span><br><span class="line">        <span class="built_in">module</span>.exports=definition();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//将执行结果挂在window变量中，在浏览器中this指向window对象</span></span><br><span class="line">        <span class="keyword">this</span>[name]=definition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="string">'hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//hello.xx=xx</span></span><br><span class="line">    <span class="keyword">return</span> hello;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>(当然这个还可以继续重构)  </p>
<p><strong>ps:关于seajs的详细应用，后续会详细介绍.</strong></p>
<h5 id="参考资源">参考资源</h5><p>[CMD 模块定义规范]  <a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a></p>
<p>[前端模块化开发的价值] <a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">https://github.com/seajs/seajs/issues/547</a></p>
<p>[与 RequireJS 的异同]<a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="external">https://github.com/seajs/seajs/issues/277</a></p>
<p>[深入浅出Node]作者朴灵&nbsp;<a href="https://github.com/jacksontian" target="_blank" rel="external">https://github.com/jacksontian</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着互联网的飞速发展，用户和企业对web前端的展示和交互要求也越来越高；而在web铁三角(html+css+js)中扮演很重要角色的javascript也在不断的前进；从最初web1.0被用于做前端表单校验和网页动画；]]>
    
    </summary>
    
      <category term="javascript" scheme="http://www.jmolboy.com/tags/javascript/"/>
    
      <category term="requirejs" scheme="http://www.jmolboy.com/tags/requirejs/"/>
    
      <category term="seajs" scheme="http://www.jmolboy.com/tags/seajs/"/>
    
      <category term="模块化" scheme="http://www.jmolboy.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="javascript" scheme="http://www.jmolboy.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始nodejs]]></title>
    <link href="http://www.jmolboy.com/2015/10/23/beginlearnnode/"/>
    <id>http://www.jmolboy.com/2015/10/23/beginlearnnode/</id>
    <published>2015-10-23T11:39:47.000Z</published>
    <updated>2015-11-06T08:17:35.000Z</updated>
    <content type="html"><![CDATA[<p>其实几年前就听说了node，只是当时了解到js可以运行于服务器端，的确赶到很兴奋；但是…因为各种原因，一直从未真正去学习它，更为真实应用过；近来来在做项目处理数据同步请求队列时，发现请求处理的不及时，导致效率如此低；<a id="more"></a>原因是php在发送请求后一直会在等待接口的响应，响应结束业务才会继续往下走；那么有没有一种方法可以发送完请求，不block在这里，可以继续处理后续的逻辑的技术呢；这时才想到node的非阻塞异步I/O，顿时眼前一亮啊…</p>
<p><img src="http://7xnu0w.com1.z0.glb.clouddn.com/node.png" alt="Node"></p>
<h2 id="资料集">资料集</h2><ul>
<li><p><a href="https://nodejs.org/]" target="_blank" rel="external">node官网网站</a> 下载安装、看文档、看文档、找源码</p>
</li>
<li><p><a href="http://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html" target="_blank" rel="external">快速搭建 Node.js 开发环境以及加速npm</a></p>
</li>
<li><p><a href="https://github.com/nqdeng/7-days-nodejs" target="_blank" rel="external">七天学会NodeJS</a> 很好的node简单介绍</p>
</li>
<li><p><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">node入门</a> 在线书籍</p>
</li>
<li><p><a href="https://developers.google.com/v8/" target="_blank" rel="external">google V8引擎</a> 解析nodejs的V8引擎介绍</p>
</li>
<li><p><a href="https://github.com/youyudehexie/node123" target="_blank" rel="external">node.js中文资料导航</a></p>
</li>
<li><p><a href="https://github.com/cnodejs/nodeclub/wiki/%E5%90%8D%E4%BA%BA%E5%A0%82" target="_blank" rel="external">nodejs名人堂</a> node届的大牛们 </p>
</li>
<li><p><a href="https://cnodejs.org/" target="_blank" rel="external">node中文社区</a> 这里有很多技术大牛哦，当然还有他们的分享</p>
<p><br>     </p>
</li>
</ul>
<h2 id="优秀的开源node项目">优秀的开源node项目</h2><p>Nodejs之所以从2009年问世后如此被大家追捧，除了它的异步I/O(基于事件机制的回调)和体现出的高性能；还有个更重要的原因是它是基于javascript来开发(当然还可以结合C++)，这就降低了学习的门槛，前端开发的童鞋顿时可以借此进入服务器端开发；所以社区也变得异常活跃，各种码农们开始贡献自己的源码，使它成为了<a href="https://github.com/" target="_blank" rel="external">Github</a>排名第二的开源项目；</p>
<p>目前有好多大型高流量网站采用了它，像Paypal,支付宝,腾讯等；当然除了web，nodejs也被应用在许多方面，基于nodejs诞生了很多让人惊奇的项目，这些项目涉及到应用程序监控、媒体流、远程控制、桌面和移动应用等方面</p>
<ul>
<li><p><a href="http://node-os.com/" target="_blank" rel="external">NodeOS</a>       </p>
<p>  NodeOS是基于linux内核上采用Nodejs开发的操作系统，采用npm进行包管理，目前，Docker和Vagrant都是采用NodeOS的首个版本进行构建的<br><img src="http://7xnu0w.com1.z0.glb.clouddn.com/nodeos.png" alt="nodeos"></p>
</li>
<li><p><a href="http://nwjs.io/" target="_blank" rel="external">NW(node-webkit)</a></p>
<p>  Node-Webkit是一个基于Chromium与NodeJS的应用程序运行器，允许开发者使用Web技术编写桌面应用；它是NodeJS与WebKit技术的融合，提供一个跨Windows、Linux平台的客户端应用开发的底层框架；跨平台开发并非易事，其中一种方式便是使用Web技术和Node-Webkit开发桌面应用来代替那些庞大且笨重的开发框架。<br><img src="http://7xnu0w.com1.z0.glb.clouddn.com/nodewebkit.jpg" alt="npm"></p>
</li>
<li><p><a href="http://logio.org/" target="_blank" rel="external">logio</a></p>
<p>  一个时时日志监控项目，基于nodejs的Socket.io库<br><img src="http://7xnu0w.com1.z0.glb.clouddn.com/logio.png" alt="logio"><br><br></p>
</li>
</ul>
<h2 id="什么都node?">什么都node?</h2><p>说过了node的异步I/O和其高性能，同时它可以运行与服务端，甚至可以作为服务器，那它究竟适合使用在哪些场合呢？(自然不是所有，千万不要脑袋发热，听说Nodejs很好，所以要将项目迁移到node上来)作为一个开发，必须要保持对技术和产品的冷静，盲目的跃进和夸海口最终只会功亏一篑，因为彼只知其外而不知其内；适合使用Node的场景:</p>
<ul>
<li>处理高并发</li>
<li>I/O密集型应用</li>
<li>大量Ajax请求的应用</li>
<li>JSON API应用(可以很轻松的写出RestApi)</li>
<li>单页面应用</li>
<li>实时通讯(基于Socket.io)</li>
<li>…</li>
</ul>
<p><br></p>
<p>ps: 已经开始node了，除了惊喜，更多的是充实感和满足感！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>其实几年前就听说了node，只是当时了解到js可以运行于服务器端，的确赶到很兴奋；但是…因为各种原因，一直从未真正去学习它，更为真实应用过；近来来在做项目处理数据同步请求队列时，发现请求处理的不及时，导致效率如此低；]]>
    
    </summary>
    
      <category term="node webkit" scheme="http://www.jmolboy.com/tags/node-webkit/"/>
    
      <category term="nodejs" scheme="http://www.jmolboy.com/tags/nodejs/"/>
    
      <category term="nodeos" scheme="http://www.jmolboy.com/tags/nodeos/"/>
    
      <category term="nwjs" scheme="http://www.jmolboy.com/tags/nwjs/"/>
    
      <category term="socket.io" scheme="http://www.jmolboy.com/tags/socket-io/"/>
    
      <category term="nodejs" scheme="http://www.jmolboy.com/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Time is a bird for ever on the wing]]></title>
    <link href="http://www.jmolboy.com/2015/10/21/excerpt15-11-04/"/>
    <id>http://www.jmolboy.com/2015/10/21/excerpt15-11-04/</id>
    <published>2015-10-21T10:39:47.000Z</published>
    <updated>2015-11-19T06:40:56.000Z</updated>
    <content type="html"><![CDATA[<p>Time is a bird for ever on the wing.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Time is a bird for ever on the wing.</p>
]]>
    </summary>
    
      <category term="摘" scheme="http://www.jmolboy.com/tags/%E6%91%98/"/>
    
      <category term="摘" scheme="http://www.jmolboy.com/categories/%E6%91%98/"/>
    
  </entry>
  
</feed>
